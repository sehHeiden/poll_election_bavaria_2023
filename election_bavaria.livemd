# Bavarian Election

```elixir
Mix.install(
  [
    {:explorer, "~> 0.6.1"},
    {:kino_vega_lite, "~> 0.1.7"},
    {:jason, "~> 1.4"},
    {:httpoison, "~>1.8"},
    {:kino_db, "~> 0.2.1"},
    {:exqlite, "~> 0.11.0"},
    {:kino_bumblebee, "~> 0.3.0"},
    {:exla, "~> 0.5.1"}
  ],
  config: [nx: [default_backend: EXLA.Backend]]
)
```

## Polls

```elixir
alias VegaLite, as: Vl
```

```elixir
pools = Explorer.DataFrame.from_csv!("polls.csv")
```

```elixir
defmodule Graphs do
  def create_graph(data_source, title, party) do
    Vl.new(width: 500, height: 300, title: title)
    |> Vl.data_from_values(data_source, only: ["end_date", party, "institute"])
    |> Vl.layers([
      Vl.new()
      |> Vl.mark(:point)
      |> Vl.encode_field(:x, "end_date", type: :temporal, title: "poll end date")
      |> Vl.encode_field(:y, party, type: :quantitative, title: "percentage")
      |> Vl.encode_field(:color, "institute", type: :nominal),
      Vl.new()
      |> Vl.mark(:line, color: "firebrick", opacity: 0.5)
      |> Vl.transform(regression: party, on: "end_date")
      |> Vl.encode_field(:x, "end_date", type: :temporal, title: "poll end date")
      |> Vl.encode_field(:y, party, type: :quantitative, title: "percentage")
    ])
  end
end
```

```elixir
Graphs.create_graph(pools, "Polls - CSU", "csu")
```

```elixir
Graphs.create_graph(pools, "Pools - Buendnis-Gruene", "gruene")
```

```elixir
Graphs.create_graph(pools, "Pools - Freie Waehler", "fw")
```

```elixir
Graphs.create_graph(pools, "Pools - AFD", "afd")
```

```elixir
Graphs.create_graph(pools, "Pools - SPD", "spd")
```

```elixir
Graphs.create_graph(pools, "Pools - FDP", "fdp")
```

```elixir
VegaLite.new(width: 500, height: 300, title: "Linke - polls")
|> VegaLite.data_from_values(pools, only: ["end_date", "linke", "institute"])
|> VegaLite.layers([
  VegaLite.new()
  |> VegaLite.mark(:point)
  |> VegaLite.encode_field(:x, "end_date", type: :temporal, title: "poll end date")
  |> VegaLite.encode_field(:y, "linke", type: :quantitative, title: "percentage")
  |> VegaLite.encode_field(:color, "institute", type: :nominal),
  VegaLite.new()
  |> VegaLite.mark(:line, color: "firebrick", opacity: 0.5)
  |> VegaLite.transform(regression: "linke", on: "end_date")
  |> VegaLite.encode_field(:x, "end_date", type: :temporal, title: "poll end date")
  |> VegaLite.encode_field(:y, "linke", type: :quantitative, title: "percentage")
])
```

## Mastodon

Read mastodon toots/posts and save it into a database.

```elixir
topics =
  ~w[spd csu  gruene  grune gruenen grunen afd freiewaehler freiewahler fw fpd linke soeder soder aiwanger]
```

```elixir
{:ok, json} = File.read("secrets.json")
json = Jason.decode!(json)
```

```elixir
defmodule Mastodon.Tag do
  def query(tag) do
    response = HTTPoison.get!("https://chaos.social/api/v1/timelines/tag/#{tag}")
    Jason.decode!(response.body)
  end
end
```

```elixir
posts = Mastodon.Tag.query("afd")
```

```elixir
toot_data =
  Enum.map(posts, fn post ->
    %{
      username: post["account"]["acct"],
      id: post["id"],
      content: post["content"],
      date: post["created_at"]
    }
  end)
```

```elixir
user_data =
  Enum.map(posts, fn post ->
    %{
      name: post["account"]["acct"],
      followers: post["account"]["followers_count"],
      following: post["account"]["following_count"],
      avatar: post["account"]["avatar"]
    }
  end)
```

```elixir
fields_data =
  Enum.map(posts, fn post ->
    user = post["account"]["acct"]

    field1 = post["account"]["fields"] |> Enum.at(0)
    field2 = post["account"]["fields"] |> Enum.at(1)
    field3 = post["account"]["fields"] |> Enum.at(2)

    %{
      "user" => user,
      "field1_name" => if(field1, do: field1["name"], else: nil),
      "field1_value" => if(field1, do: field1["value"], else: nil),
      "field2_name" => if(field2, do: field2["name"], else: nil),
      "field2_value" => if(field2, do: field2["value"], else: nil),
      "field3_name" => if(field3, do: field3["name"], else: nil),
      "field3_value" => if(field3, do: field3["value"], else: nil)
    }
  end)
```

```elixir
val = Enum.at(Enum.at(posts, 3)["account"]["fields"], 0)
if val, do: val["name"], else: nil
```

<!-- livebook:{"attrs":{"database_path":".baviarian_election_2023_mastodon.sqlitedb","type":"sqlite","variable":"conn"},"chunks":null,"kind":"Elixir.KinoDB.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
opts = [database: ".baviarian_election_2023_mastodon.sqlitedb"]
{:ok, conn} = Kino.start_child({Exqlite, opts})
```

## Classification

<!-- livebook:{"attrs":{"compiler":"exla","sequence_length":100,"task_id":"text_classification","top_k":4,"variant_id":"roberta_bertweet_sentiment"},"chunks":[[0,351],[353,496]],"kind":"Elixir.KinoBumblebee.TaskCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, model_info} = Bumblebee.load_model({:hf, "finiteautomata/bertweet-base-sentiment-analysis"})

{:ok, tokenizer} = Bumblebee.load_tokenizer({:hf, "vinai/bertweet-base"})

serving =
  Bumblebee.Text.text_classification(model_info, tokenizer,
    top_k: 4,
    compile: [batch_size: 1, sequence_length: 100],
    defn_options: [compiler: EXLA]
  )

text_input = Kino.Input.textarea("Text", default: "Cats are so cute")
form = Kino.Control.form([text: text_input], submit: "Run")
frame = Kino.Frame.new()

Kino.listen(form, fn %{data: %{text: text}} ->
  Kino.Frame.render(frame, Kino.Text.new("Running..."))
  output = Nx.Serving.run(serving, text)

  output.predictions
  |> Enum.map(&{&1.label, &1.score})
  |> Kino.Bumblebee.ScoredList.new()
  |> then(&Kino.Frame.render(frame, &1))
end)

Kino.Layout.grid([form, frame], boxed: true, gap: 16)
```
